import datetime
import os
import subprocess
import sys

embed_template = """#include "precompiled.h"

// autogenerated on {date}
// DO NOT MODIFY

namespace yaga {{
namespace {ns} {{

extern const unsigned char {name}[] = {{ {bytes} }};
extern const size_t {name}Size = {size};

}} // !namespace {ns}
}} // !namespace yaga
"""

def make_abs_path(path):
  return path if os.path.isabs(path) else os.path.join(os.getcwd(), path)

def make_dirs(path):
  if not os.path.exists(path):
    os.makedirs(path)

def make_dirs_file(path):
  make_dirs(os.path.dirname(path))

def is_shader(path):
  return path.endswith('.vert') or path.endswith('.frag') or path.endswith('.comp')

def is_compiled_shader(path):
  return path.endswith('.spv')

def move_filename(filename, from_dir, to_dir):
  return os.path.join(to_dir, os.path.relpath(filename, from_dir))

def is_file_newer(path, ref_path):
  return os.path.isfile(path) and os.path.getmtime(path) >= os.path.getmtime(ref_path)

def build_shaders(in_dir, out_dir):
  in_dir  = make_abs_path(in_dir)
  out_dir = make_abs_path(out_dir)
  make_dirs(out_dir)
  count = 0
  for root, dirs, files in os.walk(in_dir):
    for file in files:
      if not is_shader(file):
        continue;
      in_file  = os.path.join(root, file)
      out_file = move_filename(in_file, in_dir, out_dir) + '.spv'
      if is_file_newer(out_file, in_file):
        print('no changes detected in %s, skipping' % file)
        continue
      make_dirs_file(out_file)
      print('compiling %s...' % file)
      args = ['glslc', in_file, '-o', out_file]
      result = subprocess.run(args, stdout=subprocess.PIPE)
      if result.stdout:
        print(result.stdout.decode('utf-8'))
      count += 1
  print('%d shaders compiled' % count)

def to_camel_case(str):
  up = False
  result = ""
  for ch in str:
    if ch == '_' or ch == '.':
      up = True
      continue
    result += ch.upper() if up else ch
    up = False
  return result

def embed_shader(in_filename, out_filename, namespace):
  shader_name = ""
  with open(in_filename, 'rb') as file:
    bytes = file.read()
  with open(out_filename, 'w') as file:
    file.write(embed_template.format(
      date  = datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
      ns    = namespace,
      name  = to_camel_case(os.path.basename(in_filename)[:-4]) + "Shader",
      size  = len(bytes),
      bytes = ', '.join('0x{:02x}'.format(x) for x in bytes)
    ))

def embed_shaders(in_dir, out_dir, namespace):
  in_dir  = make_abs_path(in_dir)
  out_dir = make_abs_path(out_dir)
  count = 0
  for root, dirs, files in os.walk(in_dir):
    for file in files:
      if not is_compiled_shader(file):
        continue
      in_file  = os.path.join(root, file)
      out_file = move_filename(in_file, in_dir, out_dir)[:-4] + '.cpp'   
      if is_file_newer(out_file, in_file):
        print('no changes detected in %s, skipping' % file)
        continue
      make_dirs_file(out_file)
      embed_shader(in_file, out_file, namespace)
      count += 1
  print('%s shaders embeded'  % count)